{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "sshPublicKey": {
      "type": "string",
      "metadata": {
        "description": "Configure all linux machines with the SSH public key string.  Your key should include three parts, for example 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'"
      }
    },
    "spinnakerDnsLabelPrefix": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Name for the Public IP used to access the Spinnaker Virtual Machine."
      }
    },
    "kubernetesDnsLabelPrefix": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Name for the Public IP used to access the Kubernetes cluster targeted for deployment."
      }
    },
    "servicePrincipalClientId": {
      "type": "string",
      "metadata": {
        "description": "Service Principal Client ID (also called App ID) that has owner rights to the subscription used for this deployment. It is used by the Kubernetes cluster to dynamically manage resources (e.g. user-defined load balancers)."
      }
    },
    "servicePrincipalClientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "Service Principal secret that has owner rights to the subscription used for this deployment. It is used by the Kubernetes cluster to dynamically manage resources (e.g. user-defined load balancers)."
      }
    },
    "azureContainerRegistry": {
      "type": "string",
      "allowedValues": [
        "Include",
        "Exclude"
      ],
      "defaultValue": "Include",
      "metadata": {
        "description": "If included, an Azure Container Registry will be created and a prefix must be specified."
      }
    },
    "azureContainerRegistryPrefix": {
      "type": "string",
      "metadata": {
        "description": "If targeting an Azure Container Registry, a unique prefix used to create the registry."
      },
      "defaultValue": ""
    },
    "kubernetesPipeline": {
      "type": "string",
      "allowedValues": [
        "Include",
        "Exclude"
      ],
      "defaultValue": "Include",
      "metadata": {
        "description": "If included, a sample pipeline will be created in your Spinnaker instance. This also creates a dev (private) load balancer and prod (public) load balancer in your Kubernetes cluster."
      }
    }
  },
  "variables": {
    "resourcePrefix": "spinnaker",
    "kubernetesName": "[concat('containerservice-', resourceGroup().name)]",
    "kubernetesMasterCount": 1,
    "storageAccountName": "[concat(variables('resourcePrefix'), uniquestring(resourceGroup().id))]",
    "OSDiskName": "[concat(variables('resourcePrefix'), 'OSDisk')]",
    "nicName": "[concat(variables('resourcePrefix'), 'VMNic')]",
    "subnetName": "[concat(variables('resourcePrefix'), 'Subnet')]",
    "publicIPAddressName": "[concat(variables('resourcePrefix'), 'PublicIP')]",
    "vmStorageAccountContainerName": "vhds",
    "vmName": "[concat(variables('resourcePrefix'), 'VM')]",
    "virtualNetworkName": "[concat(variables('resourcePrefix'), 'VNET')]",
    "vmExtensionName": "initializeSpinnaker",
    "acrDeploymentName": "acrDeployment",
    "_artifactsLocation": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/spinnaker-vm-to-kubernetes/",
    "_artifactsLocationSasToken": ""
  },
  "resources": [
    {
      "apiVersion": "2016-09-30",
      "type": "Microsoft.ContainerService/containerServices",
      "location": "[resourceGroup().location]",
      "name": "[variables('kubernetesName')]",
      "properties": {
        "orchestratorProfile": {
          "orchestratorType": "Kubernetes"
        },
        "masterProfile": {
          "count": "[variables('kubernetesMasterCount')]",
          "dnsPrefix": "[concat(parameters('kubernetesDnsLabelPrefix'),'mgmt')]"
        },
        "agentPoolProfiles": [
          {
            "name": "agentpools",
            "count": 1,
            "vmSize": "Standard_D2_v2",
            "dnsPrefix": "[concat(parameters('kubernetesDnsLabelPrefix'),'agents')]"
          }
        ],
        "linuxProfile": {
          "adminUsername": "[parameters('adminUsername')]",
          "ssh": {
            "publicKeys": [
              {
                "keyData": "[parameters('sshPublicKey')]"
              }
            ]
          }
        },
        "servicePrincipalProfile": {
          "ClientId": "[parameters('servicePrincipalClientId')]",
          "Secret": "[parameters('servicePrincipalClientSecret')]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2016-01-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "apiVersion": "2016-09-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('spinnakerDnsLabelPrefix')]"
        }
      }
    },
    {
      "apiVersion": "2016-09-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "10.0.0.0/24"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-09-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')),'/subnets/',variables('subnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D3_v2"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/',parameters('adminUserName'),'/.ssh/authorized_keys')]",
                  "keyData": "[parameters('sshPublicKey')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "14.04.5-LTS",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2016-01-01').primaryEndpoints.blob, variables('vmStorageAccountContainerName'), '/', variables('OSDiskName'), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2016-01-01').primaryEndpoints.blob)]"
          }
        }
      }
    },
    {
      "apiVersion": "2016-09-01",
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('acrDeploymentName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('_artifactsLocation'), 'nested/', parameters('azureContainerRegistry'), 'ACR.json' , variables('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "azureContainerRegistryPrefix": {
            "value": "[parameters('azureContainerRegistryPrefix')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'), '/', variables('vmExtensionName'))]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]",
        "[resourceId('Microsoft.ContainerService/containerServices', variables('kubernetesName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('acrDeploymentName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[concat(variables('_artifactsLocation'), 'scripts/set_spinnaker.sh', variables('_artifactsLocationSasToken'))]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('./set_spinnaker.sh', ' -i \"', parameters('servicePrincipalClientId'), '\" -p \"', parameters('servicePrincipalClientSecret'), '\" -s \"', subscription().subscriptionId, '\" -t \"', subscription().tenantId, '\" -u \"', parameters('adminUsername'), '\" -g \"', resourceGroup().name, '\" -f \"', reference(resourceId('Microsoft.ContainerService/containerServices', variables('kubernetesName'))).masterProfile.fqdn, '\" -c \"', variables('kubernetesMasterCount'), '\" -n \"', variables('storageAccountName'), '\" -k \"', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2016-01-01').keys[0].value, '\" -r \"', reference(variables('acrDeploymentName')).outputs.azureContainerRegistryName.value, '\" -e \"', parameters('kubernetesPipeline'), '\" -a \"', variables('_artifactsLocation'), '\" -o \"', variables('_artifactsLocationSasToken'), '\"')]"
        }
      }
    }
  ],
  "outputs": {
    "spinnakerFQDN": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
    },
    "spinnakerSsh": {
      "type": "string",
      "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('publicIPAddressName')).dnsSettings.fqdn)]"
    },
    "kubernetesMasterFQDN": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerService/containerServices', variables('kubernetesName'))).masterProfile.fqdn]"
    },
    "kubernetesMasterSsh": {
      "type": "string",
      "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(resourceId('Microsoft.ContainerService/containerServices', variables('kubernetesName'))).masterProfile.fqdn)]"
    },
    "azureContainerRegistryName": {
      "type": "string",
      "value": "[reference(variables('acrDeploymentName')).outputs.azureContainerRegistryName.value]"
    }
  }
}